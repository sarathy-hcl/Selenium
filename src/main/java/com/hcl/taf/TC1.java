package com.hcl.taf;

import com.hcl.atf.taf.util.Configuration;
import com.hcl.atf.taf.util.PauseResumeController;
import com.hcl.atf.taf.util.executionevents.JsonTestcaseExecutionEvent;
import java.awt.Robot;
import java.util.*;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.*;
import com.hcl.atf.taf.ConsoleWriter;
import com.hcl.atf.taf.objectrepository.TAFObjectRepositoryManager;
import com.hcl.atf.taf.seleniumUtilities.EvidenceCapture;
import com.hcl.atf.taf.testdata.TAFTestDataManager;
import org.openqa.selenium.*;
import org.openqa.selenium.interactions.*;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.ui.*;
import org.openqa.selenium.NoSuchElementException;
import org.testng.Assert;
import org.testng.annotations.*;
import org.apache.commons.io.*;
import org.apache.commons.lang.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import java.awt.image.BufferedImage;
import org.openqa.selenium.Point;
import javax.imageio.ImageIO; 
import org.openqa.selenium.chrome.ChromeDriver; 
import java.text.SimpleDateFormat;

/*Automation Script for Testcase : WebTC
Description 		: WebTC
Code generated by TAF on 	: Thu Oct 29 21:45:54 IST 2020*/
public class TC1 {
public TAFObjectRepositoryManager tafObjectRepositoryManagerFld;
public TAFTestDataManager tafTestDataManagerReferenceFld;

public WebDriver driver;
public Actions action;
public String browserName;
public String testCaseName;
public String actualTestCaseName;
public String testCaseDesc;
public Util util;
public static String runListId;
public static int index=0;
public static boolean multiKeyStrokeFailed = false;
String value="";
String id="";
String Location="";
String testCaseScriptQualifiedName="", testCaseScriptFileName="", testCasePriority="";
String testStepName="", testStepDesc="",	testStepInput="", testStepExpectedOutput="", testStepObservedOutput="", testStepScreenShotPath="", executionRemarks="", failureReason="", testStepScreenShotLabel="",Screenshotpath="";
Date testStepStartTime=null,testStepEndTime=null;

@BeforeMethod
public void setUp() {
   if(ConsoleWriter.isJobFailedAndAbored()) {
     Assert.fail("Job : "+Main.getRunlistId()+" has failed and terminated due to the policy : "+ConsoleWriter.getTestExecutionOnFailurePolicy());
   }
	tafTestDataManagerReferenceFld = Main.getMain().getTafTestDataManager();
	tafObjectRepositoryManagerFld = Main.getMain().getTafObjectRepositoryManager();
	browserName = Main.getMain().getBrowserName();
	driver = Main.getMain().getDriver();
	runListId=Main.getMain().getRunlistId();
	util=new Util();
	testCaseName= "WebTC";
	actualTestCaseName= "WebTC";
	testCaseDesc= "WebTC";
	ConsoleWriter.setEventTestCaseName(testCaseName);
	ConsoleWriter.setTestRunListId(Integer.valueOf(runListId));
}

@Test
		public void WebTCMethod()
		{ 

//1. Test step - Go to website https://www.google.com
                     
{                     
try{
   String webSiteURL = util.processStringData("webAppUrl[1]");
	System.out.println("WebSite >>>"+webSiteURL);
   testStepStartTime = new Date(System.currentTimeMillis());
   testStepInput = "https://www.google.com : " + webSiteURL;
	driver.get(webSiteURL); 
   testStepObservedOutput="Go to website https://www.google.com is performed.";
   testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Go to website https://www.google.com");
   
   ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Go to website https://www.google.com", "Go to website https://www.google.com", testStepInput, "Go to https://www.google.com should be performed.", testStepObservedOutput,testStepScreenShotPath,true,testStepStartTime, new Date(System.currentTimeMillis()), "Go to website https://www.google.com", "", "Go to Website", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
   
}catch(Exception e){
   testStepObservedOutput = "Go to website https://www.google.com has failed.";
   failureReason="Exception: " + (e.getMessage());
   testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Go to website https://www.google.com"); 
   ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Go to website https://www.google.com", "Go to website https://www.google.com", testStepInput, "Go to https://www.google.com should be performed.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Go to website https://www.google.com", "", "Go to Website", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
   
	}
}
//2. Test step - Refresh current page
                     
{                     
try{
     testStepStartTime = new Date(System.currentTimeMillis());
       testStepInput = "N/A"; 
	  driver.navigate().refresh();
     testStepObservedOutput="Current page refresh is performed.";
     testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Refresh current page");	
     ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Refresh current page", "Refresh current page", testStepInput, "Refresh current page should be performed.", testStepObservedOutput,testStepScreenShotPath,true,testStepStartTime, new Date(System.currentTimeMillis()), "Refresh current page", "", "Refresh current page", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
   
}catch(Exception e){
   e.printStackTrace();
   testStepObservedOutput ="Current page refresh could not be performed.";
   failureReason="Exception: " + e.getMessage();
   testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Refresh current page"); 
   ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Refresh current page", "Refresh current page", testStepInput, "Refresh current page should be performed.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Refresh current page", "", "Refresh current page", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
   }
}
		}
}
