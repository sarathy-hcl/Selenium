package com.hcl.taf;
import com.hcl.atf.taf.util.Configuration;
import com.hcl.atf.taf.util.executionevents.JsonTestcaseExecutionEvent;
import java.awt.Robot;
import java.util.*;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.*;
import com.hcl.atf.taf.ConsoleWriter;
import com.hcl.atf.taf.objectrepository.TAFObjectRepositoryManager;
import com.hcl.atf.taf.seleniumUtilities.EvidenceCapture;
import com.hcl.atf.taf.testdata.TAFTestDataManager;
import org.openqa.selenium.*;
import org.openqa.selenium.interactions.*;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.ui.*;
import org.openqa.selenium.NoSuchElementException;
import org.testng.Assert;
import org.testng.annotations.*;
import org.apache.commons.io.*;
import org.apache.commons.lang.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import java.awt.image.BufferedImage;
import org.openqa.selenium.Point;
import javax.imageio.ImageIO; 
import org.openqa.selenium.chrome.ChromeDriver; 
import java.text.SimpleDateFormat;
/*Automation Script for Testcase : TAFLogin
Description 		: TAFLogin
Code generated by TAF on 	: Tue Feb 04 17:09:52 IST 2020*/
public class Login {
  public TAFObjectRepositoryManager tafObjectRepositoryManagerFld;
  public TAFTestDataManager tafTestDataManagerReferenceFld;
  public WebDriver driver;
  public Actions action;
  public String browserName;
  public String testCaseName;
  public String actualTestCaseName;
  public String testCaseDesc;
  public Util util;
  public static String runListId;
  public static int index=0;
  public static boolean multiKeyStrokeFailed = false;
  String value="";
  String id="";
  String Location="";
  String testCaseScriptQualifiedName="", testCaseScriptFileName="", testCasePriority="";
  String testStepName="", testStepDesc="",	testStepInput="", testStepExpectedOutput="", testStepObservedOutput="", testStepScreenShotPath="", executionRemarks="", failureReason="", testStepScreenShotLabel="",Screenshotpath="";
  Date testStepStartTime=null,testStepEndTime=null;
  @BeforeMethod
  public void setUp() {
    if(ConsoleWriter.isJobFailedAndAbored()) {
      Assert.fail("Job : "+Main.getRunlistId()+" has failed and terminated due to the policy : "+ConsoleWriter.getTestExecutionOnFailurePolicy());
    }
    tafTestDataManagerReferenceFld = Main.getMain().getTafTestDataManager();
    tafObjectRepositoryManagerFld = Main.getMain().getTafObjectRepositoryManager();
    browserName = Main.getMain().getBrowserName();
    driver = Main.getMain().getDriver();
    runListId=Main.getMain().getRunlistId();
    util=new Util();
    testCaseName= "TAFLogin";
    actualTestCaseName= "TAFLogin";
    testCaseDesc= "TAFLogin";
    ConsoleWriter.setEventTestCaseName(testCaseName);
    ConsoleWriter.setTestRunListId(Integer.valueOf(runListId));
  }
  @Test
  public void TAFLoginMethod()
  { 
    //1. Test step - Go to website http://localhost:8081/TAF/
    {                     
      try{
        String webSiteURL = util.processStringData("http://10.166.90.15:8081/TAF/");
        testStepStartTime = new Date(System.currentTimeMillis());
        testStepInput = "http://localhost:8081/TAF/ : " + webSiteURL;
        driver.get("http://10.166.90.15:8081/TAF"); 
        testStepObservedOutput="Go to website http://localhost:8081/TAF/ is performed.";
        testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Go to website http://localhost:8081/TAF/");	
        ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Go to website http://localhost:8081/TAF/", "Go to website http://localhost:8081/TAF/", testStepInput, "Go to http://localhost:8081/TAF/ should be performed.", testStepObservedOutput,testStepScreenShotPath,true,testStepStartTime, new Date(System.currentTimeMillis()), "Go to website http://localhost:8081/TAF/", "", "Go to Website", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
      }catch(Exception e){
        testStepObservedOutput = "Go to website http://localhost:8081/TAF/ has failed.";
        failureReason="Exception: " + (e.getMessage());
        testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Go to website http://localhost:8081/TAF/"); 
        ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Go to website http://localhost:8081/TAF/", "Go to website http://localhost:8081/TAF/", testStepInput, "Go to http://localhost:8081/TAF/ should be performed.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Go to website http://localhost:8081/TAF/", "", "Go to Website", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
      }
    }
    //2. Test step - wait for 2 seconds
    {                   
      String time = "2"; 
      try{
        testStepName="Wait for 2 seconds ";
        testStepDesc="Wait for 2 seconds "; 
        int iwaitTime= util.processIntData("2");
        executionRemarks="wait for 2 seconds";
        Thread.sleep(iwaitTime*1000);
        testStepObservedOutput ="wait for 2 seconds is performed.";
        testStepInput = "2"+ iwaitTime;
      } catch(Exception e){
        testStepObservedOutput ="Wait 2 seconds could not be performed.";
        failureReason="Exception: " + (e.getMessage()); 
      }
    }      
    //3. Test step - Fill field LoginUsername with admin
    {                   
      try{
        testStepStartTime = new Date(System.currentTimeMillis());
        value = util.processStringData("admin");
        WebElement fillField = null; 
        boolean isElementFound = true ;
        try{
          id=" LoginUsername";
          Identity identity = util.getIdentity("LoginUsername");
          testStepInput = identity == null ? "Identifier not found for the element" :  "LoginUsername : "+identity.IdentifierType+" - "+identity.Identifier+", admin : " + value;
          if(identity==null){
            testStepObservedOutput ="Element LoginUsername could not be resolved.";
            ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginUsername with admin", "Fill field LoginUsername with admin", testStepInput, "Field LoginUsername should be filled with value admin.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginUsername with admin", "Element could not be resolved LoginUsername", "Fill field LoginUsername", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
          } else {
            for (int retrycount = 0; retrycount < 3; retrycount++) { 
              try {
                if(identity != null){
                  if(isElementFound){
                    fillField = util.findElement(identity.IdentifierType, identity.Identifier);
                    fillField.sendKeys(value); 
                    break;
                  }
                }
              }catch(StaleElementReferenceException e) {                       	 
                e.printStackTrace();   
                testStepObservedOutput ="Element LoginUsername could not be found. Stale Element occurred.";
                failureReason="Stale Element Exception : " + e.getMessage();
                ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginUsername with admin", "Fill field LoginUsername with admin", testStepInput, "Field LoginUsername should be filled with value admin.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginUsername with admin", "Element could not be resolved LoginUsername", "Fill field LoginUsername", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority); 
              } 
            } 
            testStepObservedOutput ="Fill field LoginUsername with value admin is performed.";
            testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Fill field LoginUsername with admin");	
            ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginUsername with admin", "Fill field LoginUsername with admin", testStepInput, "Field LoginUsername should be filled with value admin.", testStepObservedOutput,testStepScreenShotPath,true,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginUsername with admin", "Element could not be resolved LoginUsername", "Fill field LoginUsername", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
          }
        } catch(NoSuchElementException e){
          testStepObservedOutput ="Element LoginUsername could not be found in the page.";
          failureReason="Exception: " + e.getMessage();		
          testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Fill field LoginUsername with admin");		
          ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginUsername with admin", "Fill field LoginUsername with admin", testStepInput, "Field LoginUsername should be filled with value admin.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginUsername with admin", "Element could not be resolved LoginUsername", "Fill field LoginUsername", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
          isElementFound=false;
        }
      } catch(Exception e){
        e.printStackTrace();
        testStepObservedOutput ="Fill field LoginUsername with value admin could not be performed.";
        failureReason="Exception: " + e.getMessage();
        testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Fill field LoginUsername with admin"); 
        ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginUsername with admin", "Fill field LoginUsername with admin", testStepInput, "Field LoginUsername should be filled with value admin.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginUsername with admin", "Element could not be resolved LoginUsername", "Fill field LoginUsername", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
      }
    }
    //4. Test step - Fill field LoginPassword with Idpa@123
    {                   
      try{
        testStepStartTime = new Date(System.currentTimeMillis());
        value = util.processStringData("Idpa@123");
        WebElement fillField = null; 
        boolean isElementFound = true ;
        try{
          id=" LoginPassword";
          Identity identity = util.getIdentity("LoginPassword");
          testStepInput = identity == null ? "Identifier not found for the element" :  "LoginPassword : "+identity.IdentifierType+" - "+identity.Identifier+", Idpa@123 : " + value;
          if(identity==null){
            testStepObservedOutput ="Element LoginPassword could not be resolved.";
            ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginPassword with Idpa@123", "Fill field LoginPassword with Idpa@123", testStepInput, "Field LoginPassword should be filled with value Idpa@123.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginPassword with Idpa@123", "Element could not be resolved LoginPassword", "Fill field LoginPassword", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
          } else {
            for (int retrycount = 0; retrycount < 3; retrycount++) { 
              try {
                if(identity != null){
                  if(isElementFound){
                    fillField = util.findElement(identity.IdentifierType, identity.Identifier);
                    fillField.sendKeys(value); 
                    break;
                  }
                }
              }catch(StaleElementReferenceException e) {                       	 
                e.printStackTrace();   
                testStepObservedOutput ="Element LoginPassword could not be found. Stale Element occurred.";
                failureReason="Stale Element Exception : " + e.getMessage();
                ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginPassword with Idpa@123", "Fill field LoginPassword with Idpa@123", testStepInput, "Field LoginPassword should be filled with value Idpa@123.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginPassword with Idpa@123", "Element could not be resolved LoginPassword", "Fill field LoginPassword", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority); 
              } 
            } 
            testStepObservedOutput ="Fill field LoginPassword with value Idpa@123 is performed.";
            testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Fill field LoginPassword with Idpa@123");	
            ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginPassword with Idpa@123", "Fill field LoginPassword with Idpa@123", testStepInput, "Field LoginPassword should be filled with value Idpa@123.", testStepObservedOutput,testStepScreenShotPath,true,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginPassword with Idpa@123", "Element could not be resolved LoginPassword", "Fill field LoginPassword", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
          }
        } catch(NoSuchElementException e){
          testStepObservedOutput ="Element LoginPassword could not be found in the page.";
          failureReason="Exception: " + e.getMessage();		
          testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Fill field LoginPassword with Idpa@123");		
          ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginPassword with Idpa@123", "Fill field LoginPassword with Idpa@123", testStepInput, "Field LoginPassword should be filled with value Idpa@123.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginPassword with Idpa@123", "Element could not be resolved LoginPassword", "Fill field LoginPassword", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
          isElementFound=false;
        }
      } catch(Exception e){
        e.printStackTrace();
        testStepObservedOutput ="Fill field LoginPassword with value Idpa@123 could not be performed.";
        failureReason="Exception: " + e.getMessage();
        testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Fill field LoginPassword with Idpa@123"); 
        ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Fill field LoginPassword with Idpa@123", "Fill field LoginPassword with Idpa@123", testStepInput, "Field LoginPassword should be filled with value Idpa@123.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Fill field LoginPassword with Idpa@123", "Element could not be resolved LoginPassword", "Fill field LoginPassword", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
      }
    }
    //5. Test step - Mouse hover over submit and click
    {                     
      try{
        int newwaitTime= util.processIntData("60");
        testStepStartTime = new Date(System.currentTimeMillis());
        id="submit";
        WebElement element=null;
        boolean isElementFound = true ;
        Identity identity = util.getIdentity(id);
        testStepInput = identity == null ? "Identifier not found for the element" :  "submit : "+identity.IdentifierType+" - "+identity.Identifier;
        if(identity==null){
          testStepObservedOutput ="Element submit could not be resolved.";
          ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Mouse hover over submit and click", "Mouse hover over submit and click", testStepInput, "Mouse hover over submit and click should be performed.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Mouse hover over submit", "Element could not be resolved submit", "Mouse hover over submit", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
        } else {
          try{
            for(int retrycount=0;retrycount<3;retrycount++){
              try{
                if(isElementFound){
                  element=util.WaitForElementToBeVisible(identity,newwaitTime);
                  if(element != null) {
                    element=util.WaitForElementToBeClickable(identity,newwaitTime);
                  } else {
                    testStepObservedOutput ="Element submit could not be found. Stale Element occurred.";
                    failureReason= "Element submit could not be found. Stale Element occurred.";
                    ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Mouse hover over submit and click", "Mouse hover over submit and click", testStepInput, "Mouse hover over submit and click should be performed.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Mouse hover over submit", "Element could not be resolved submit", "Mouse hover over submit", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority); 
                  } 
                  if(identity != null){
                    element = util.findElement(identity.IdentifierType, identity.Identifier);
                    if(element != null){
                      action = new Actions(driver);	 
                      action = action.moveToElement(element);	 
                      Thread.sleep(1000);	 
                      action.click().build().perform();	 
                      Thread.sleep(500); 
                      break; 
                    }
                  } 
                } 
              }catch(StaleElementReferenceException e) {                       	 
                e.printStackTrace();   
                testStepObservedOutput ="Element submit could not be found. Stale Element occurred.";
                failureReason="Stale Element Exception : " + e.getMessage();
                ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Mouse hover over submit and click", "Mouse hover over submit and click", testStepInput, "Mouse hover over submit and click should be performed.", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Mouse hover over submit", "Element could not be resolved submit", "Mouse hover over submit", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority); 
              }    
            }	 
            testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Mouse hover over submit and click"); 
            ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Mouse hover over submit and click", "Mouse hover over submit and click", testStepInput, "I performed mouse hover over submit", testStepObservedOutput,testStepScreenShotPath,true,testStepStartTime, new Date(System.currentTimeMillis()), "Mouse hover over submit", "Element could not be resolved submit", "Mouse hover over submit", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority); 
          }catch(NoSuchElementException e){
            testStepObservedOutput ="Element submit could not be found.";
            failureReason="Exception: " + e.getMessage();
            testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Mouse hover over submit and click"); 
            ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Mouse hover over submit and click", "Mouse hover over submit and click", testStepInput, "I performed mouse hover over submit", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Mouse hover over submit", "Element could not be resolved submit", "Mouse hover over submit", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);		
            isElementFound=false;
          }
        }
      }catch(Exception e){
        e.printStackTrace();
        testStepObservedOutput ="Mouse hover over submit and click could not be performed.";
        failureReason="Exception: " + e.getMessage();		
        testStepScreenShotPath=EvidenceCapture.captureScreenshotInSelenium(driver, runListId, testCaseName, "Mouse hover over submit and click"); 
        ConsoleWriter.assertStep(testCaseName, testCaseDesc, "Mouse hover over submit and click", "Mouse hover over submit and click", testStepInput, "I performed mouse hover over submit", testStepObservedOutput,testStepScreenShotPath,false,testStepStartTime, new Date(System.currentTimeMillis()), "Mouse hover over submit", "Element could not be resolved submit", "Mouse hover over submit", testCaseScriptQualifiedName, testCaseScriptFileName, testCasePriority);
      }
    }
    //6. Test step - wait for 5 seconds
    {                   
      String time = "5"; 
      try{
        testStepName="Wait for 5 seconds ";
        testStepDesc="Wait for 5 seconds "; 
        int iwaitTime= util.processIntData("5");
        executionRemarks="wait for 5 seconds";
        Thread.sleep(iwaitTime*1000);
        testStepObservedOutput ="wait for 5 seconds is performed.";
        testStepInput = "5"+ iwaitTime;
      } catch(Exception e){
        testStepObservedOutput ="Wait 5 seconds could not be performed.";
        failureReason="Exception: " + (e.getMessage()); 
      }
    }      
  }
}
